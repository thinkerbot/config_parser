= ConfigParser

Parse command-line options into a configuration hash.

== Description

ConfigParser is an analogue of
{OptionParser}[http://www.ruby-doc.org/core/classes/OptionParser.html] that
formalizes the pattern of setting parsed options into a hash. ConfigParser
uses a similar, simplified declaration syntax that places less emphasis on the
conversion of inputs to objects, preferring instead to delegate that
responsibility to whatever consumes the hash.

== Usage

ConfigParser can be used much like OptionParser, where the parser itself can
be used as a delegate to a config hash.

  parser = ConfigParser.new
  parser.on '-s', '--long LONG', 'a standard option' do |value|
    parser[:long] = value
  end
 
  parser.on '--[no-]switch', 'a switch' do |value|
    parser[:switch] = value
  end

  parser.on '--flag', 'a flag' do
    parser[:flag] = true
  end
  
  parser.parse('a b --long arg --switch --flag c')
  # => ['a', 'b', 'c']
  
  parser.config     
  # => {:long => 'arg', :switch => true, :flag => true}
  
  parser.to_s
  # => %q{
  #     -s, --long LONG             a standard option
  #     --[no-]switch               a switch
  #     --flag                      a flag
  # }

ConfigParser formalizes this pattern of setting values into a config hash as
they occur, and adds the ability to specify default values.

  parser = ConfigParser.new
  parser.add(:key, 'default')

  parser.parse('a b --key option c')             # => ['a', 'b', 'c']
  parser.config                                  # => {:key => 'option'}
                                                 
  parser.parse('a b c')                          # => ['a', 'b', 'c']
  parser.config                                  # => {:key => 'default'}

Config keys may be mapped to options using arguments like those given to 'on',
or using an options hash. A block can be given to processes values before they
are set as configs.

  parser = ConfigParser.new
  parser.add(:x, nil, '-o', '--one', 'by args') {|value| value.upcase }
  parser.add(:y, nil, :long => 'two', :desc => 'by hash')
  
  parser.parse('a b --one value --two c')
  # => ['a', 'b', 'c']
  
  parser.config
  # => {:x => 'VALUE', :y => true}

ConfigParser integrates well with libraries like
{Configurable}[http://tap.rubyforge.org/configurable] that are designed to set
configurations via a config hash.

== Installation

ConfigParser is available as a gem via {Gemcutter}[http://rubygems.org/gems/config_parser].

  % gem install config_parser

== Info

Copyright (c) 2010, Simon Chiang
License:: {MIT-Style}[link:files/MIT-LICENSE.html]
